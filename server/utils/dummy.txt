// const calculateNextRecurringDate = (currentDate, recurring) => {
//   const date = new Date(currentDate);
//   switch (recurring) {
//     case "daily":
//       date.setDate(date.getDate() + 1);
//       break;
//     case "weekly":
//       date.setDate(date.getDate() + 7);
//       break;
//     case "monthly":
//       date.setMonth(date.getMonth() + 1);
//       break;
//     case "quarterly":
//       date.setMonth(date.getMonth() + 3);
//       break;
//     case "2_minutes":
//       date.setMinutes(date.getMinutes() + 2);
//       break;
//     default:
//       return null;
//   }
//   return date;
// };


----------------------------------------------------------
// Get Affotax Access Token
const getAccessToken = async () => {
  try {
    var data = qs.stringify({
      client_id:
        "902822249198-35omnv2esshomojr08js6udg7jtgtn94.apps.googleusercontent.com",
      client_secret: "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",
      refresh_token:
        "1//03bEEXaA-j3HNCgYIARAAGAMSNwF-L9Ir0nIb2FvaVaLFhQW46VLYpsqXerPNgquOeDP78qWsZsSmuwM6WS0_iq-iVZdRkON4dC0",
      grant_type: "refresh_token",
    });

    var config = {
      method: "post",
      maxBodyLength: Infinity,
      url: "https://accounts.google.com/o/oauth2/token",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      data: data,
    };

    const response = await axios(config);
    var accessToken = await response.data.access_token;

    console.log("Access token1:", accessToken);

    return accessToken;
  } catch (error) {
    console.log("Error in access token:", error);
  }
};

// Outsourcing Access token
const getOutsourceAccessToken = async () => {
  try {
    var data = qs.stringify({
      client_id: process.env.OUTSOURCING_CLIENT_ID,

      client_secret: process.env.OUTSOURCING_CLIENT_SECRET,
      refresh_token: process.env.OUTSOURCING_REFRESH_TOKEN,
      grant_type: "refresh_token",
    });
    var config = {
      method: "post",
      maxBodyLength: Infinity,
      url: process.env.GMAIL_API,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      data: data,
    };
    var response = await axios(config);

    var accessToken = await response.data.access_token;
    return accessToken;
  } catch (error) {
    console.log("Error in access token in outsourcing:", error);
  }
};

// Send Email (With Attachments)
export const sendEmailWithAttachments = async (emailData) => {
  try {
    let accessToken = "";
    let fromEmail = "";

    if (emailData.company_name === "Affotax") {
      accessToken = await getAccessToken();
      fromEmail = "Affotax <info@affotax.com>";
    } else if (emailData.company_name === "Outsource") {
      accessToken = await getOutsourceAccessToken();
      fromEmail = "Outsource Accountings <admin@outsourceaccountings.co.uk>";
    }
    console.log("AccessToken:", accessToken);

    const emailMessageParts = [];

    emailMessageParts.push("From: " + fromEmail);
    emailMessageParts.push("To: " + emailData.email);
    emailMessageParts.push("Subject: " + emailData.subject);
    emailMessageParts.push("MIME-Version: 1.0");
    emailMessageParts.push(
      'Content-Type: multipart/mixed; boundary="boundary_example"'
    );
    emailMessageParts.push("");

    // Email Body
    emailMessageParts.push("--boundary_example");
    emailMessageParts.push('Content-Type: text/html; charset="UTF-8"');
    emailMessageParts.push("Content-Transfer-Encoding: 7bit");
    emailMessageParts.push("");
    emailMessageParts.push(emailData.message);
    emailMessageParts.push("");

    // Attachments
    if (emailData.attachments && emailData.attachments.length > 0) {
      for (const attachment of emailData.attachments) {
        emailMessageParts.push("--boundary_example");
        emailMessageParts.push("Content-Type: application/octet-stream");
        emailMessageParts.push(
          'Content-Disposition: attachment; filename="' +
            attachment.filename +
            '"'
        );
        emailMessageParts.push("Content-Transfer-Encoding: base64");
        emailMessageParts.push("");
        emailMessageParts.push(attachment.content);
        emailMessageParts.push("");
      }
    }

    emailMessageParts.push("--boundary_example--");

    const emailMessage = emailMessageParts.join("\n");
    const encodedMessage = Buffer.from(emailMessage).toString("base64");

    const config = {
      method: "post",
      url: "https://gmail.googleapis.com/gmail/v1/users/me/messages/send",
      headers: {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json",
      },
      data: JSON.stringify({
        raw: encodedMessage,
      }),
    };

    const resp = await axios(config);
    return resp;
  } catch (error) {
    console.log("Error while send email!:", error);
  }
};

--------------------------------------------Download Attachments--------------------------------------------
export const getAttachments = async (attachmentId, messageId, companyName) => {
  try {
    console.log("Fetching Attachment data:", {
      attachmentId,
      messageId,
      companyName,
    });

    let accessToken;
    if (companyName === "Affotax") {
      accessToken = await getAccessToken();
    } else {
      accessToken = await getOutsourceAccessToken();
    }

    if (!accessToken) {
      throw new Error("Access token is not available");
    }

    // Gmail API URL for fetching the attachment
    const url = `https://www.googleapis.com/gmail/v1/users/me/messages/${messageId}/attachments/${attachmentId}`;

    const config = {
      method: "get",
      url,
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
      responseType: "arraybuffer",
    };

    // Make the request
    const response = await axios(config);
    const attachmentData = response.data;

    // Get MIME type from response headers
    const contentType =
      response.headers["content-type"] || "application/octet-stream";

    // Return the attachment data and its content type (MIME)
    return {
      attachmentData,
      contentType,
    };
  } catch (error) {
    console.error("Error while getting attachment from Gmail:", error.message);
    throw error;
  }
};
